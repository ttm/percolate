__doc__="""Usage outlines of the percolation package"""

Notes:
    Keep updating status graph in B.status_graph (a rdflib.Graph())

import percolation as P
def overallOutline:
    """The most simple but overall usage of percolation features
    
    ToDo:
    P.web.startMeteor()
    P.sparql.linkToEndpoint("http://dbpedia.org/sparql")
    P.web.linkToEndpoint("http://dbpedia.org/sparql")
    P.rdf.voidStatistics()
    P.rdf.voidStatistics(NS.dbp.AlbertCamus)"""

    po=P.rdf.ontology() # rdflib.Graph()
    metadata=P.rdf.legacyMetadata() # rdflib.Graph()
    percolation_graph=po+metadata # rdflib.Graph()
    snapshot=P.rdf.oneTranslate() # URI
    network=P.topology.makeNetwork(snapshot) # networx network
    topological_analysis=P.topology.analyse(network) # rdflib.Graph()
    textual_analysis=P.text.analyse(snapshot) # rdflib.Graph()
    integrated_analysis=P.integrated.analyse(snapshot) # rdflib.Graph()
    P.tables.make(integrated_analysis,"/tables/") # render latex, js and md tables
    P.audiovisuals.make(integrated_analysis,"/av/") # render sonification in sync with stopmotion animation from data
    user_uri=P.oneUser(integrated_analysis) # uri
    P.audiovisuals.makeMusic(integrated_analysis,"/av/",focus=user_uri) # render music
    P.web.startServer(port=5077) # start server in localhost:5077 or better specify


